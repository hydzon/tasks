Index: base/0_environment.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/0_environment.py b/base/0_environment.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/base/0_environment.py	(date 1698579624000)
@@ -0,0 +1,7 @@
+"""
+Настройка окружения
+"""
+
+# Установить нужную версию Python;
+# Создать виртуальное окружение;
+# Работа с зависимостями (pip list, pip freeze, pip install/uninstall);
Index: base/1_base_syntax.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/1_base_syntax.py b/base/1_base_syntax.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/base/1_base_syntax.py	(date 1698579624000)
@@ -0,0 +1,178 @@
+"""
+Базовый синтаксис
+"""
+import typing
+
+
+# основные типы и структуры
+types = [
+    ...,
+    None,
+    True, False, bool,
+    1, int,
+    1.1, float,
+    ' ', " ", """ """, f'', r'', str,
+    b'', bytes,
+    [], list,
+    (), tuple,
+    {1, }, set,
+    {}, dict
+]
+
+
+# основные операторы
+_ = 1 + 2
+_ = 1 - 2
+_ = 1 * 2
+_ = 1 ** 2
+_ = 1 / 2
+_ = 1 // 2
+_ = 1 % 2
+_ = 1 and 2
+_ = 1 or 2
+_ = 1 > 2 | 1 >= 2 | 1 < 2 | 1 <= 2
+
+
+# цикл for
+for _ in types:
+    pass
+
+for _ in types:
+    break
+else:
+    pass
+
+
+# Comprehensions
+a = [i for i in types]
+b = (i for i in types)
+c = {i for i in types if isinstance(i, typing.Hashable)}
+d = {str(i): i for i in types}
+
+
+# Присвоение, распаковка, срезы
+e, *f, g = types
+h = [*f]
+_ = [1, 2, 3][:]
+_ = {**{}}
+
+
+# Утверждение assert
+assert h, 'test'
+
+
+# цикл while
+while a:
+    a.pop()
+
+while a:
+    break
+else:
+    pass
+
+
+# Функции
+def func(text: str, space: str, action: typing.Callable) -> None:
+    if not text:
+        return
+
+    print(space + action(text))
+    func(text[1:], space + ' ', action)
+    print(space + action(text))
+
+
+# lambda функции
+func('*' * 11, '', lambda text: ' '.join(i for i in text))
+
+
+# Декораторы
+def decorator(multiplier: int):
+
+    def dec(func: typing.Callable):
+        # Области видимости функции
+        global a, b, c, d
+        nonlocal multiplier
+
+        if multiplier % 2 == 0:
+            multiplier += 1
+
+        def wrap(*args, **kwargs):
+            for _ in range(multiplier):
+
+                # Генераторы
+                yield func(*args, **kwargs)
+
+        return wrap
+
+    return dec
+
+
+@decorator(10)
+def f(num: int) -> int:
+    return num
+
+
+qwe = [*f(1)]
+
+
+# Условия
+if i := d.get(''):
+    pass
+elif not (q := d.get(1)):
+    pass
+else:
+    ...
+
+
+# match qwe:
+#     case "1":
+#         pass
+#     case _:
+#         pass
+
+
+# Исключения и их обработка
+try:
+    1 / 0
+except ZeroDivisionError as exc:
+    pass
+else:
+    pass
+finally:
+    ...
+
+
+# Классы
+class A:
+
+    class_attrs = None
+
+    def __init__(self, *args, **kwargs):
+        self.args, self.kwargs = args, kwargs
+        self.__test_arg = None
+
+    def main(self) -> None:
+        ...
+
+    @property
+    def test_arg(self) -> typing.Any:
+        return self.__test_arg
+
+    @test_arg.setter
+    def test_arg(self, value: typing.Any):
+        self.__test_arg = value
+
+
+class B(A):
+
+    def main(self) -> None:
+        super().main()
+        print(self.test_arg)
+
+    @classmethod
+    def create(cls, *args, **kwargs) -> 'B':
+        return cls(*args, **kwargs)
+
+    @staticmethod
+    def get_test() -> str:
+        return 'test'
Index: base/2_structures.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/2_structures.py b/base/2_structures.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/base/2_structures.py	(date 1698579624000)
@@ -0,0 +1,44 @@
+"""
+Основные структуры данных
+"""
+# 1. Как создать / изменить / удалить
+# 2. Изменяемые / неизменяемые объекты
+# 3. Основные методы базовых структур
+a = []
+a = list()
+a = [1] * 10
+a = [1, 2, 3] + [3, 4, 5]
+a = [*a]
+a.append(a)
+a.pop()
+a.extend(a)
+# ...
+
+b = (1, 2, a)
+b = tuple([1, 2])
+b = b[:]
+b, _ = b
+# ...
+
+c = {1, 2}
+d = set([1, 2])
+c.add(3)
+c.remove(3)
+c.update({None, })
+_ = c - d
+_ = c | d
+_ = c & d
+_ = frozenset(c)
+# ...
+
+d = dict(none123=None)
+d = {None: None, **d}
+d[1] = 1
+d = d | {2: 2}
+_ = d.setdefault(3, 3)
+_ = d.get(4)
+d.pop(1)
+d.items()
+d.keys()
+d.values()
+# ...
Index: base/3_work_with_different.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/3_work_with_different.py b/base/3_work_with_different.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/base/3_work_with_different.py	(date 1698579624000)
@@ -0,0 +1,89 @@
+"""
+Работа с разными форматами:
+- работа со временем и датами
+- работа с Decimal
+- работа с регулярными выражениями
+- работа с файлами (например csv)
+- Работа с вводом/выводом
+- Работа с uuid
+- Работа с os
+- Работа с кодировками
+"""
+import csv
+import datetime
+import decimal
+import json
+import os
+import re
+import time
+import uuid
+
+
+# Даты
+today = datetime.date.today()
+yesterday = today - datetime.timedelta(days=1)
+tomorrow = today + datetime.timedelta(days=1)
+
+current_time = datetime.datetime.now()
+current_timestamp = current_time.timestamp()
+in_str = current_time.strftime('%d:%m:%y %H:%M:%S')
+in_datetime = datetime.datetime.strptime(in_str, '%d:%m:%y %H:%M:%S')
+
+timestamp = time.time()
+from_timestamp = datetime.datetime.fromtimestamp(timestamp)
+
+
+# работа с Decimal
+context = decimal.getcontext()
+context.rounding = decimal.ROUND_DOWN
+
+a = decimal.Decimal('0.3')
+b = decimal.Decimal(0.3)
+c = b.quantize(decimal.Decimal('.0001'), rounding=decimal.ROUND_UP)
+
+
+# работа с регулярными выражениями
+pattern = re.compile(r'^@(\w+)$')
+nicknames = ['@qweqwe', '@@qweqwe', 'qweqwe', 'qwe@qwe']
+valid_nicknames = [i for i in nicknames if re.match(pattern, i)]
+
+
+# Работа с файлами
+# some_dict = {'qwe': 123}
+# file_name = 'new.json'
+file_name = 'new.csv'
+with open(file_name, 'w') as file:
+    # json.dump(some_dict, fp=file, indent=4, ensure_ascii=False)
+    fieldnames = ['nicknames', 'length']
+    writer = csv.DictWriter(file, fieldnames=fieldnames)
+    writer.writeheader()
+    for nickname in valid_nicknames:
+        writer.writerow({'nicknames': nickname, 'length': len(nickname)})
+
+with open(file_name, 'r') as file:
+    # json_obj = json.load(file)
+    reader = csv.DictReader(file)
+    for row in reader:
+        print(row['nicknames'], row['length'])
+
+
+# Ввод/вывод
+test = input('test:').split()
+for i in range(10):
+    print(*test, sep='(╯ ° □ °) ╯ ┻━┻', end='\n' + '\t' * i,)
+
+
+# Работа с uuid
+uid = uuid.uuid4()
+
+
+# Работа с os
+path = os.path.join(__file__, 'qweqwe')
+os.getenv('ENV_NAME')
+
+os.system('echo 123')
+
+
+# Кодировки
+a = 'qweqwe'.encode('utf-16')
+b = a.decode('utf-16')
Index: base/4_oop.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/4_oop.py b/base/4_oop.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/base/4_oop.py	(date 1698579624000)
@@ -0,0 +1,77 @@
+"""
+ООП. Классы и наследование, super, магические методы и т.п.
+"""
+import typing
+
+
+class A:
+
+    class_attrs = None
+
+    def __init__(self, *args, **kwargs):
+        self.args, self.kwargs = args, kwargs
+        self.__test_arg = None
+
+    def __len__(self) -> int:
+        return len(self.args) + len(self.kwargs)
+
+    def __bool__(self) -> bool:
+        return bool(self.__test_arg)
+
+    def main(self) -> None:
+        print('Вызов внутри: A')
+
+    @property
+    def test_arg(self) -> typing.Any:
+        return self.__test_arg
+
+    @test_arg.setter
+    def test_arg(self, value: typing.Any):
+        self.__test_arg = value
+
+
+class B(A):
+
+    def main(self) -> None:
+        print('Вызов внутри: B до super')
+        super().main()
+        print('Вызов внутри: B после super')
+
+    @classmethod
+    def create(cls, *args, **kwargs) -> 'B':
+        return cls(*args, **kwargs)
+
+    @staticmethod
+    def get_test() -> str:
+        return 'test'
+
+
+class C(B):
+
+    def main(self) -> None:
+        print('Вызов внутри: C до super')
+        super().main()
+        print('Вызов внутри: C после super')
+
+
+class D(A):
+
+    def main(self) -> None:
+        print('Вызов внутри: D до super')
+        super().main()
+        print('Вызов внутри: D после super')
+
+
+class QWE(C, D):
+
+    def main(self) -> None:
+        print('Вызов внутри: QWE до super')
+        super().main()
+        print('Вызов внутри: QWE после super')
+
+
+if __name__ == '__main__':
+    qwe = QWE()
+    qwe.main()
+    print(QWE.mro())
+    print(dir(QWE))
Index: base/5_tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/5_tests.py b/base/5_tests.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/base/5_tests.py	(date 1698579624000)
@@ -0,0 +1,60 @@
+"""
+Написание тестов
+"""
+# Юнит тесты
+
+import unittest
+
+
+def add(x, y):
+    return x + y
+
+
+class TestAdd(unittest.TestCase):
+    """Тестирование функции add."""
+
+    def test_add_positive_numbers(self):
+        result = add(2, 3)
+        self.assertEqual(result, 5)
+
+    def test_add_negative_numbers(self):
+        result = add(-2, -3)
+        self.assertEqual(result, -5)
+
+    def test_add_zero(self):
+        result = add(0, 5)
+        self.assertEqual(result, 5)
+
+    def test_add_negative_and_positive(self):
+        result = add(-2, 5)
+        self.assertEqual(result, 3)
+
+    def test_add_zero_and_zero(self):
+        result = add(0, 0)
+        self.assertEqual(result, 0)
+
+    def test_add_large_numbers(self):
+        result = add(999999999, 1)
+        self.assertEqual(result, 1000000000)
+
+    def test_add_floats(self):
+        result = add(1.2, 3.4)
+        self.assertAlmostEqual(result, 4.6)
+
+    def test_add_string(self):
+        with self.assertRaises(TypeError):
+            add('one', 2)
+
+    def test_add_none(self):
+        with self.assertRaises(TypeError):
+            add(None, 2)
+
+    def test_add_boolean(self):
+        result1 = add(True, 2)
+        result2 = add(False, 4)
+        self.assertEqual(result1, 3)
+        self.assertEqual(result2, 4)
+
+
+if __name__ == '__main__':
+    unittest.main()
Index: base/6_logging.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/6_logging.py b/base/6_logging.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/base/6_logging.py	(date 1698579624000)
@@ -0,0 +1,64 @@
+"""
+Логирование
+"""
+import logging
+import requests
+
+import secrets
+
+
+class TelegramHandler(logging.Handler):
+    """Handler для отправки логов в телеграм."""
+
+    def __init__(self, token, chat_id):
+        super().__init__()
+
+        self.token = token
+        self.chat_id = chat_id
+
+    def send_message_to_telegram(self, message: str) -> None:
+        """Отправляет сообщение в телеграм."""
+        url = f'https://api.telegram.org/bot{self.token}/sendMessage'
+        data = {
+            'chat_id': self.chat_id,
+            'text': message
+        }
+        requests.post(url=url, json=data)
+
+    def emit(self, record: logging.LogRecord) -> None:
+        """
+        Зарегистрировать запись лога.
+
+        Данный метод защищён от возможных ошибок, чтобы ошибка при логировании не повлияла на работу кода.
+        """
+        try:
+            message = self.format(record)
+            self.send_message_to_telegram(message)
+        except RecursionError:
+            raise
+        except Exception:
+            self.handleError(record)
+
+
+def create_tg_logger(name: str) -> logging.Logger:
+    """Создать telegram Logger."""
+    logger = logging.getLogger(name)
+    logger.setLevel(level=logging.DEBUG)
+    handler = TelegramHandler(secrets.TOKEN, secrets.CHAT_ID)
+    handler.formatter = logging.Formatter('%(levelname)s: LOGGER: %(name)s TIME: %(asctime)s: MESSAGE: %(message)s')
+    logger.addHandler(handler)
+
+    return logger
+
+
+def main() -> None:
+    """Тестовое логирование."""
+    logger = create_tg_logger('test-logger')
+
+    print('До')
+    logger.critical('qweqwe, ой беда все сюда')
+    print('После')
+
+
+if __name__ == '__main__':
+    main()
Index: base/7_code.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/7_code.py b/base/7_code.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/base/7_code.py	(date 1698579624000)
@@ -0,0 +1,30 @@
+"""
+Соблюдение общих норм для написания красивого кода, который легко читать и поддерживать.
+"""
+
+# 1) Соблюдение PEP8.
+# 2) Длина строки — 119 символов.
+# 3) Импорты отсортированы правильно, неиспользуемых импортов нет.
+# 4) Отступы — 4 пробела.
+# 5) Одинаковые кавычки, одинаковые методы решения одинаковых проблем.
+# 6) Отсутствие закомментированного кода и стандартных комментариев.
+# 7) Комментарии к функциям оформлены в виде Docstrings.
+# 8) Длинные куски кода логически разделены пустыми строками, как абзацы в тексте.
+# 9) Исполняемый код в .py-файлах закрыт конструкцией if __name__ == ‘__main__’
+# 10) В f-строках применяется только подстановка переменных. Не применяются логические или арифметические операции.
+# 11) Переменные названы в соответствии с их смыслом, по-английски, нет однобуквенных названий и транслита.
+
+
+# Проектирование
+# YAGNI You Aren’t Gonna Need It / Вам это не понадобится
+# Неиспользуемый код удаляется, а не комментируется или висит мёртвым грузом
+
+# DRY Don’t Repeat / Не повторяйтесь
+# Не должно быть одинаковых классов / функций / больших кусков кода, делающих одно и то же
+
+# KISS Keep It Simple, Stupid / Будь проще
+# Нужно стремиться писать максимально простой и понятный код.
+# Каждая функция и класс ориентированы на выполнение одной конкретной задачи
+
+# Есть еще SOLID и DI
+# но это необязательно для нашего уровня (уровень поиска первой работы)
Index: t2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/t2.py b/t2.py
new file mode 100644
--- /dev/null	(date 1703208133211)
+++ b/t2.py	(date 1703208133211)
@@ -0,0 +1,7 @@
+from functools import reduce
+
+x = input()
+if reduce(lambda a, b: a + b, map(lambda z: int(z) ** 3, x)) == int(x):
+    print("Y")
+else:
+    print("N")
Index: base/8_debugger.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/8_debugger.py b/base/8_debugger.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/base/8_debugger.py	(date 1698579624000)
@@ -0,0 +1,3 @@
+"""
+Навык отладки
+"""
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1703419352892)
+++ b/.idea/vcs.xml	(date 1703419352892)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: base/secrets.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/secrets.py b/base/secrets.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/base/secrets.py	(date 1698579624000)
@@ -0,0 +1,5 @@
+import os
+
+
+TOKEN = os.getenv('TOKEN')  # Токен телеграм-бота
+CHAT_ID = os.getenv('CHAT_ID')  # Айди чата, где находится телеграм-бот
Index: .idea/tasks.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/tasks.iml b/.idea/tasks.iml
new file mode 100644
--- /dev/null	(date 1703207332914)
+++ b/.idea/tasks.iml	(date 1703207332914)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.venv" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1703207332922)
+++ b/.idea/modules.xml	(date 1703207332922)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/tasks.iml" filepath="$PROJECT_DIR$/.idea/tasks.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: extra/2_asymptotic_complexity.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extra/2_asymptotic_complexity.py b/extra/2_asymptotic_complexity.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/extra/2_asymptotic_complexity.py	(date 1698579624000)
@@ -0,0 +1,39 @@
+"""
+Понимание асимптотической сложности в базовых операциях
+https://wiki.python.org/moin/TimeComplexity
+https://leetcode.com/
+"""
+
+# Хотя бы самая минимальная база по Big O notation.
+
+# Чем отличается поиск в списке
+if 100500 in [1, 2, 3]:
+    ...
+
+# от поиска в множестве
+if 100500 in {1, 2, 3}:
+    ...
+
+
+new_test_list = []
+
+# В чем разница между:
+for item in (1, 2, 3):
+    new_test_list.append(item)
+    # vs
+    new_test_list.insert(0, item)
+
+
+# Какая сложность у
+new_test_list.pop(-1)
+# и у
+number = new_test_list[4]
+
+
+new_list = [1, 2, 3, ]
+# Что лучше. Вот так:
+for i in range(3):
+    new_list.append(i)
+
+# или
+new_list.extend([i for i in range(3)])
Index: extra/1_async_python.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extra/1_async_python.py b/extra/1_async_python.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/extra/1_async_python.py	(date 1698579624000)
@@ -0,0 +1,87 @@
+"""
+Работа с асинхронным python
+"""
+import asyncio
+import time
+
+import aiohttp
+import requests
+
+
+asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
+
+
+URLS = [
+    'https://google.com',
+    'https://www.youtube.com/',
+    'https://www.djangoproject.com/',
+    'https://www.python.org/',
+    'https://www.wikipedia.org/'
+]
+
+
+def time_tracker(func):
+    """Декоратор для измерения скорости работы декорируемой функции."""
+
+    def wrapper(*args, **kwargs):
+        start = time.time()
+        func(*args, **kwargs)
+        end = time.time() - start
+
+        print(f'Функция {func.__name__} отработала за {end} секунд.')
+
+    return wrapper
+
+
+async def make_async_request(idx, url, session: aiohttp.ClientSession) -> None:
+    """Асинхронный запрос на url."""
+    async with session.get(url) as response:
+        if 200 <= response.status < 300:
+            text = 'успешно'
+        else:
+            text = 'безуспешно'
+
+        print(f'{idx} | {url}: {text}', end='\n')
+
+
+def make_sync_request(idx, url) -> None:
+    """Синхронный запрос на url."""
+    response = requests.get(url)
+    if 200 <= response.status_code < 300:
+        text = 'успешно'
+    else:
+        text = 'безуспешно'
+
+    print(f'{idx} | {url}: {text}', end='\n')
+
+
+async def async_run(count: int) -> None:
+    """Отправить N асинхронных запросов."""
+    tasks = []
+
+    async with aiohttp.ClientSession() as session:
+        for i in range(count):
+            tasks.append(make_async_request(idx=i, url=URLS[i % len(URLS)], session=session))
+
+        await asyncio.gather(*tasks)
+
+
+def sync_run(count: int) -> None:
+    """Отправить N синхронных запросов."""
+    for i in range(count):
+        make_sync_request(idx=i, url=URLS[i % len(URLS)])
+
+
+@time_tracker
+def async_main() -> None:
+    asyncio.run(async_run(1000))
+
+
+@time_tracker
+def sync_main() -> None:
+    sync_run(30)
+
+
+if __name__ == '__main__':
+    async_main()
+    sync_main()
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1703207332937)
+++ b/.idea/misc.xml	(date 1703207332937)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.9 (tasks)" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (tasks)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: extra/3_patterns.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extra/3_patterns.py b/extra/3_patterns.py
new file mode 100644
--- /dev/null	(date 1698579624000)
+++ b/extra/3_patterns.py	(date 1698579624000)
@@ -0,0 +1,68 @@
+"""
+Паттерны проектирования. Хотя бы синглтон
+"""
+import random
+from collections import defaultdict
+from functools import lru_cache
+
+
+ALL_DRINKS = defaultdict(int)
+
+
+class Drink:
+    """Интерфейс напитка."""
+
+    def main(self):
+        raise NotImplemented
+
+
+class Water(Drink):
+    """Вода."""
+
+    def main(self) -> str:
+        return 'вода'
+
+
+class Juice(Drink):
+    """Сок."""
+
+    def main(self) -> str:
+        return 'Сок'
+
+
+# декоратор
+def drink_counter(func):
+    """Считает кол-во выданных напитков."""
+
+    def wrapper(*args, **kwargs):
+        result = func(*args, **kwargs)
+        ALL_DRINKS[result.__class__.__name__] += 1
+        return result
+
+    return wrapper
+
+
+# фабрика
+@drink_counter
+def get_drink(price: int) -> Drink:
+    """Выдаёт какой-то напиток в зависимости от цены."""
+    if price <= 10:
+        return Water()
+
+    return Juice()
+
+
+for _ in range(10):
+    drink = get_drink(random.randint(1, 20))
+
+print(ALL_DRINKS)
+
+
+# Синглтон
+unique_juice = Juice()
+
+
+# либо так
+@lru_cache
+def get_unique_juice():
+    return Juice()
Index: t5.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/t5.py b/t5.py
new file mode 100644
--- /dev/null	(date 1703414587156)
+++ b/t5.py	(date 1703414587156)
@@ -0,0 +1,4 @@
+nums = [5, 7, 2, 9, 0, -4, 24]
+for i in range(1, len(nums)):
+    nums[i] = nums[i] + nums[i-1]
+print(nums)
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1703207332950)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1703207332950)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: t1672.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/t1672.py b/t1672.py
new file mode 100644
--- /dev/null	(date 1703419371746)
+++ b/t1672.py	(date 1703419371746)
@@ -0,0 +1,9 @@
+from functools import reduce
+
+data = [[2, 8, 7], [7, 1, 3], [1, 9, 5], [9, 9, 9]]
+max_w = 0
+for cl in data:
+    if reduce(lambda x, y: x + y, cl) > max_w:
+        max_w = reduce(lambda x, y: x + y, cl)
+
+print(max_w)
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1703207332993)
+++ b/.idea/.gitignore	(date 1703207332993)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: t3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/t3.py b/t3.py
new file mode 100644
--- /dev/null	(date 1703212132327)
+++ b/t3.py	(date 1703212132327)
@@ -0,0 +1,15 @@
+n = int(input())
+s = [True] * (n + 1)
+x = 2
+while x ** 2 <= n:
+    if s[x]:
+        j = x ** 2
+        while j < n + 1:
+            s[j] = False
+            j += x
+    x += 1
+
+d = {}
+for i in range(0, len(s)):
+    d.update({i: s[i]})
+print(d)
\ No newline at end of file
Index: t4.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/t4.py b/t4.py
new file mode 100644
--- /dev/null	(date 1703214302598)
+++ b/t4.py	(date 1703214302598)
@@ -0,0 +1,7 @@
+import datetime
+
+s = input()
+t = datetime.datetime.now()
+s = " ".join([ps for ps in s.split(sep=" ") if len(ps) > 1][::-1])
+
+print(s, str(datetime.datetime.now() - t))
\ No newline at end of file
Index: t1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/t1.py b/t1.py
new file mode 100644
--- /dev/null	(date 1703166627679)
+++ b/t1.py	(date 1703166627679)
@@ -0,0 +1,8 @@
+n = int(input())
+s = 0
+l = len(str(n))
+for i in range(l):
+    a = n % (10 ** (i + 1))
+    b = 10 ** (l - i - 1)
+    s += (a // (10 ** i)) * (10 ** (l - i - 1))
+print(s)
\ No newline at end of file
