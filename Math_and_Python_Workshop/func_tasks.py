"""
1)Напишите функцию, для нахождения двойного факториала числа dfactorial(n).
Двойной факториал числа n обозначается n‼ и определяется как произведение всех натуральных чисел в отрезке [1,n],
имеющих ту же чётность, что и n.

2)Напишите функцию для нахождения кратного факториала числа Kfactorial.
Функция factorial должна иметь 2 параметра:
n - число для которого вычисляется факториал (обязательный)
k - кратность факториала (необязательный, значение по-умолчанию - 1)
По сути кратный факториал это продолжение идеи двойного факториала. Только теперь "шаг" при вычислении не 2, а k.

3)Напишите функцию convert(L), принимающую на вход список, состоящий из чисел и строк вида:
[1, 2, '3', '4', '5', 6]
и возвращающую список целых чисел (в том же порядке)

4)Напишите функцию перевода числа из десятичной системы счисления в систему с основанием n
Функция translate должна принимать 2 параметра:
обязательный (исходное целое число в десятичной системе счисления)
необязательный, по-умолчанию 2 (основание новой системы счисления, в которую переводится число)
Примечание 1. Все новые системы счисления имеют основание меньше 10

3)Напишите 2 функции:
 - для нахождения факториала числа
 - для нахождения суперфакториала числа (1!⋅2!⋅3!⋅…⋅n!)


4)Напишите функцию maxId(L), принимающую на вход список чисел и строк вида:
[1, 2, '42', '3', '4', '5', 6, 13]
без повторений, и находящую индекс максимального целого числа в списке.
Используйте ранее написанную функцию convert(L).

"""


# ============================================     tasks  ===========================================================


def task1(n):
    return n * task1(n - 2) if n > 1 else 1


def task2(n, k=1):
    return n * task2(n - k, k) if n > 1 else 1


def task3(li):
    return [int(el) for el in li]


def task4(n, os=2):
    return (str(task4(n // os, os)) + (str(n - (n // os) * os) if n % os else '0')) if n // os else n % os


def task5(n):
    return task2(n) * task5(n - 1) if n > 1 else 1


def task6(li):


    m = max(task3(li))
    return li.index(m) if m in li else li.index(str(m))

# ============================================     MAIN     ===========================================================


def main():
    print('START')


if __name__ == '__main__':
    main()


# ============================================     TESTS     ===========================================================


def test_task1():
    assert task1(0) == 1
    assert task1(2) == 2
    assert task1(4) == 8
    assert task1(5) == 15


def test_task2():
    assert task2(0) == 1
    assert task2(0, 10) == 1
    assert task2(10, 1) == 3628800
    assert task2(8, 3) == 80
    assert task2(8, 3) == 80
    assert task2(8) == 40320
    assert task2(6, 3) == 18


def test_task3():
    assert task3([1, 2, '3', '4', '5', 6]) == [1, 2, 3, 4, 5, 6]


def test_task4():
    assert task4(19) == '10011'
    assert task4(19, 7) == '25'
    assert task4(10, 2) == '1010'
    assert task4(8, 3) == '22'


def test_task5():
    assert task5(0) == 1
    assert task5(2) == 2
    assert task5(4) == 288
    assert task5(5) == 34560


def test_task6():
    assert task6([1, 2, '42', '3', '4', '5', 6, 13]) == 2
    assert task6(['0', 1, 2, '3', '4', '5', 6, '666', 42]) == 7
    assert task6([999]) == 0
